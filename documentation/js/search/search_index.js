var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.046,1,1.822]],["body/modules/AppModule.html",[0,1.716,1,3.549,2,1.461,3,1.461,4,1.825,5,1.825,6,1.461,7,1.825,8,1.825,9,2.752,10,2.752,11,2.663,12,0.04,13,2.984,14,2.388,15,2.38,16,1.825,17,1.629,18,0.534,19,0.465,20,0.465,21,3.352,22,2.687,23,0.821,24,0.959,25,3.352,26,3.352,27,3.352,28,0.534,29,0.119,30,0.03,31,0.03]],["title/controllers/AuthController.html",[32,1.291,33,1.822]],["body/controllers/AuthController.html",[12,0.041,18,0.57,19,0.496,20,0.496,23,0.726,24,1.022,28,0.57,29,0.127,30,0.031,31,0.031,32,1.557,33,2.8,34,1.557,35,2.934,36,2.512,37,3.573,38,0.821,39,1.985,40,3.738,41,3.573,42,1.737,43,4.554,44,1.261,45,3.573,46,1.737,47,1.261,48,0.917,49,1.261,50,4.554,51,1.557,52,1.401,53,2.197,54,2.184,55,2.934,56,3.573,57,2.512,58,1.737,59,3.573,60,1.737,61,3.573]],["title/modules/AuthModule.html",[0,1.046,11,1.44]],["body/modules/AuthModule.html",[0,1.703,2,1.439,3,1.439,4,1.798,5,1.798,6,1.439,7,2.628,8,2.628,11,2.702,12,0.04,14,1.886,15,2.356,16,1.798,17,1.604,18,0.526,19,0.458,20,0.458,22,2.03,23,0.816,24,0.944,28,0.526,29,0.117,30,0.029,31,0.029,33,2.968,34,1.886,54,2.544,55,2.71,62,2.71,63,2.71,64,2.71,65,3.301,66,2.66,67,3.301,68,2.71]],["title/injectables/AuthService.html",[54,1.291,69,1.291]],["body/injectables/AuthService.html",[12,0.041,18,0.487,19,0.424,20,0.424,23,0.655,24,0.874,28,0.487,29,0.108,30,0.028,31,0.028,38,0.702,39,1.792,40,3.813,44,1.639,46,1.998,47,1.451,48,0.785,49,1.451,51,1.792,54,1.792,58,1.485,60,1.998,66,1.879,69,1.792,70,1.879,71,2.509,72,2.907,73,4.078,74,2.89,75,2.149,76,2.138,77,3.057,78,3.057,79,3.057,80,3.057,81,3.057,82,0.972,83,2.509,84,3.057,85,2.509,86,2.149,87,1.879,88,2.528,89,2.89,90,1.879,91,2.89,92,3.057,93,3.057,94,2.149,95,3.057,96,1.879]],["title/classes/CreatePostDto.html",[29,0.105,97,1.613]],["body/classes/CreatePostDto.html",[12,0.04,18,0.213,19,0.186,20,0.186,23,0.62,28,0.213,29,0.1,30,0.015,31,0.015,38,0.307,42,2.228,44,1.618,48,1.458,49,1.694,52,2.132,82,1.738,96,1.357,97,1.201,98,0.65,99,3.304,100,0.941,101,1.368,102,4.11,103,2.815,104,2.39,105,2.815,106,2.815,107,3.611,108,4.11,109,2.539,110,3.611,111,2.965,112,3.886,113,3.136,114,1.338,115,1.338,116,2.206,117,2.206,118,1.338,119,1.338,120,2.007,121,2.206,122,1.551,123,2.206,124,1.338,125,1.338,126,1.338,127,2.965,128,3.265,129,3.265,130,3.265,131,1.338,132,1.338,133,3.886,134,1.811,135,2.206,136,2.206,137,2.206,138,1.338,139,1.338,140,1.338,141,1.338,142,1.338,143,3.265,144,3.265,145,1.357,146,2.206,147,1.357,148,2.206,149,2.206,150,1.338,151,2.965,152,1.338,153,1.338,154,1.338,155,1.338,156,1.338,157,3.265,158,2.295,159,1.338,160,1.338,161,1.338,162,3.265,163,1.338,164,1.966,165,1.966,166,0.823,167,2.39,168,2.206,169,2.815,170,0.823,171,2.206,172,2.206,173,2.206,174,0.65,175,0.729,176,3.611,177,4.11,178,0.729,179,0.941,180,1.338,181,2.206,182,1.338,183,1.338,184,2.228,185,1.338,186,1.338,187,1.338,188,1.338,189,1.338,190,1.338,191,1.357,192,2.206,193,1.338,194,1.338,195,1.338,196,1.338,197,0.941,198,1.338,199,0.941,200,1.338]],["title/classes/CreateUserDto.html",[29,0.105,201,1.44]],["body/classes/CreateUserDto.html",[12,0.04,18,0.367,19,0.319,20,0.319,23,0.635,28,0.537,29,0.155,30,0.023,31,0.023,38,0.529,39,1.468,42,2.13,44,1.646,47,0.812,48,1.251,49,1.189,51,1.003,82,1.761,87,2.695,88,2.695,98,1.119,101,1.637,145,2.071,147,2.071,164,2.387,165,2.387,166,1.415,167,2.071,170,1.415,174,1.119,175,1.253,191,2.071,201,1.637,202,2.997,203,1.415,204,2.368,205,2.169,206,2.695,207,2.695,208,3.279,209,2.302,210,2.302,211,2.302,212,2.302,213,2.302,214,2.302,215,2.302,216,2.368,217,2.368,218,2.368,219,2.368,220,2.368,221,2.368,222,3.629,223,2.368,224,3.082,225,2.071,226,2.368,227,2.368,228,2.302,229,2.302,230,2.368,231,2.368,232,1.618,233,1.415,234,1.415,235,1.415,236,1.119,237,2.368,238,1.618,239,1.618,240,1.618,241,1.618,242,1.119,243,1.415,244,1.618]],["title/interfaces/ICreateUserDto.html",[205,1.613,236,1.44]],["body/interfaces/ICreateUserDto.html",[12,0.04,18,0.411,19,0.357,20,0.357,23,0.676,28,0.582,29,0.164,30,0.025,31,0.025,38,0.592,47,0.909,48,1.337,49,1.289,82,1.839,87,2.997,88,2.997,101,1.775,145,1.583,147,1.583,164,2.514,165,2.514,166,1.583,167,2.246,170,1.583,174,1.252,175,1.402,191,2.246,201,1.252,202,1.583,203,1.583,204,1.81,205,2.311,206,2.997,207,2.997,208,3.427,216,1.81,217,1.81,218,1.81,219,1.81,220,1.81,221,1.81,222,3.246,223,1.81,224,2.567,225,1.583,226,1.81,227,1.81,230,1.81,231,2.567,232,1.81,233,1.583,234,1.583,235,1.583,236,1.252,237,2.567,238,1.81,239,1.81,240,1.81,241,1.81,242,1.252,243,1.583,244,1.81,245,2.575,246,2.998]],["title/classes/PatchPostDto.html",[29,0.105,247,1.822]],["body/classes/PatchPostDto.html",[12,0.04,18,0.653,19,0.569,20,0.569,23,0.79,28,0.653,29,0.145,30,0.034,31,0.034,97,2.231,98,1.991,100,2.88,178,2.231,179,2.88,233,2.519,243,3.048,247,3.048,248,3.363,249,4.958,250,3.363]],["title/classes/PostMetadataOptionDto.html",[29,0.105,120,1.822]],["body/classes/PostMetadataOptionDto.html",[12,0.04,18,0.574,19,0.5,20,0.5,23,0.574,28,0.574,29,0.162,30,0.031,31,0.031,38,0.828,42,2.225,44,1.616,48,1.175,52,1.972,82,1.455,98,1.751,99,3.537,101,2.225,104,3.094,120,2.815,164,2.883,165,2.493,174,1.751,197,3.537,199,3.537,251,2.958,252,3.603,253,3.603,254,3.603]],["title/controllers/PostsController.html",[32,1.291,255,1.822]],["body/controllers/PostsController.html",[12,0.04,18,0.319,19,0.277,20,0.277,23,0.701,24,0.572,28,0.319,29,0.071,30,0.021,31,0.021,32,0.871,34,0.871,36,1.405,38,0.459,39,1.321,42,1.78,44,1.293,46,1.78,47,1.443,48,1.128,49,1.293,51,1.597,52,2.088,53,2.253,57,1.405,58,0.971,60,1.78,72,2.519,82,1.643,89,2.874,94,2.874,96,1.864,97,2.227,109,2.132,113,1.864,122,2.132,158,2.874,178,1.089,179,2.132,184,2.248,247,2.845,250,2.489,255,1.864,256,1.641,257,3.663,258,3.663,259,2.489,260,3.663,261,1.999,262,1.999,263,2.132,264,1.999,265,3.032,266,4.089,267,3.032,268,1.999,269,3.032,270,1.641,271,3.032,272,1.999,273,2.132,274,1.999,275,4.626,276,1.999,277,3.032,278,1.999,279,2.489,280,1.999,281,3.032,282,1.999,283,1.641,284,3.007,285,2.489,286,1.641,287,3.007,288,3.007,289,2.489,290,1.78,291,1.641,292,1.641,293,1.999,294,1.999,295,1.999,296,1.999,297,1.999,298,2.489,299,2.489,300,2.489,301,2.489,302,2.489,303,1.999,304,1.999,305,1.999,306,1.999,307,1.999]],["title/modules/PostsModule.html",[0,1.046,13,1.613]],["body/modules/PostsModule.html",[0,1.719,2,1.467,3,1.467,4,1.833,5,1.833,6,1.467,7,2.653,8,1.833,12,0.04,13,3.084,14,2.39,15,2.386,16,1.833,17,1.635,18,0.536,19,0.467,20,0.467,22,2.694,23,0.823,24,0.962,28,0.536,29,0.119,30,0.03,31,0.03,34,1.909,68,2.763,255,2.995,290,2.666,291,2.763,308,2.763,309,3.365,310,2.763,311,3.365,312,3.365]],["title/injectables/PostsService.html",[69,1.291,290,1.44]],["body/injectables/PostsService.html",[12,0.041,18,0.487,19,0.424,20,0.424,23,0.655,24,0.874,28,0.487,29,0.108,30,0.028,31,0.028,38,0.702,39,1.792,44,1.451,46,1.998,47,1.451,48,1.055,49,1.451,51,1.332,52,1.947,53,3.055,57,2.149,58,1.485,60,1.998,69,1.792,70,1.879,72,2.529,74,2.149,75,2.149,76,2.092,82,1.476,90,1.879,91,3.644,111,3.375,259,3.375,270,3.375,273,3.265,290,1.998,313,2.509,314,3.057,315,3.057,316,3.057,317,3.057,318,3.057,319,3.375,320,4.111]],["title/classes/UpdateUserDto.html",[29,0.105,242,1.44]],["body/classes/UpdateUserDto.html",[12,0.04,18,0.463,19,0.403,20,0.403,23,0.721,28,0.633,29,0.172,30,0.027,31,0.027,47,1.025,48,1.019,82,1.767,87,2.441,88,2.441,98,1.411,145,1.785,147,1.785,164,2.648,165,2.648,166,1.785,167,2.441,170,1.785,174,1.411,175,1.581,191,2.441,201,1.411,202,1.785,203,1.785,204,2.041,205,2.162,206,2.441,207,2.441,208,2.791,216,2.041,217,2.041,218,2.041,219,2.041,220,2.041,221,2.041,222,3.419,223,2.041,224,2.791,225,1.785,226,2.041,227,2.041,230,2.041,231,2.791,232,2.041,233,1.785,234,1.785,235,1.785,236,1.411,237,2.791,238,2.041,239,2.041,240,2.041,241,2.041,242,1.929,243,2.441,244,2.791]],["title/controllers/UsersController.html",[32,1.291,321,1.822]],["body/controllers/UsersController.html",[12,0.04,18,0.209,19,0.182,20,0.182,23,0.57,24,0.375,28,0.209,29,0.046,30,0.015,31,0.015,32,0.572,34,0.572,36,0.922,38,0.301,39,0.946,42,1.98,44,1.438,46,1.736,47,1.559,48,1.248,49,1.559,51,1.926,52,1.597,53,1.983,58,0.638,60,1.98,72,2.824,75,0.922,76,1.4,82,1.354,86,0.922,89,3.523,90,0.807,91,2.511,94,3.354,96,2.367,109,0.922,113,2.62,122,2.995,158,2.706,178,0.714,184,2.213,201,1.567,225,3.189,242,1.567,263,1.526,279,1.782,283,1.782,284,2.279,285,1.782,286,1.077,287,1.782,288,1.782,289,2.279,292,1.077,298,1.077,299,1.782,300,1.782,301,1.782,302,3.738,321,1.334,322,1.077,323,3.344,324,2.17,325,2.776,326,2.17,327,3.225,328,3.225,329,2.776,330,2.776,331,1.312,332,4.074,333,1.312,334,2.776,335,1.312,336,2.17,337,1.312,338,2.17,339,1.312,340,2.17,341,1.312,342,3.225,343,2.17,344,1.312,345,1.312,346,1.312,347,4.418,348,2.776,349,1.312,350,1.312,351,1.312,352,1.312,353,2.17,354,2.17,355,2.776,356,1.312,357,4.261,358,1.312,359,1.782,360,1.312,361,1.312,362,2.776,363,2.17,364,1.312,365,2.17,366,3.573,367,1.312,368,1.782,369,2.776,370,1.077,371,1.312,372,1.312,373,1.312,374,1.312,375,1.312,376,1.312,377,1.312,378,1.312,379,1.312,380,1.312,381,2.17,382,1.312,383,2.17,384,1.312,385,1.312,386,1.312,387,1.312,388,1.312,389,1.312,390,1.077,391,1.312,392,1.312,393,1.312,394,1.312,395,1.312,396,1.312,397,1.312,398,1.312]],["title/modules/UsersModule.html",[0,1.046,14,1.291]],["body/modules/UsersModule.html",[0,1.703,2,1.439,3,1.439,4,1.798,5,1.798,6,1.439,7,2.628,8,2.628,11,2.103,12,0.04,14,2.423,15,2.356,16,1.798,17,1.604,18,0.526,19,0.458,20,0.458,22,2.03,23,0.816,24,0.944,28,0.526,29,0.117,30,0.029,31,0.029,34,1.886,66,2.66,76,2.288,321,2.968,370,2.71,399,2.71,400,2.71,401,2.71,402,3.301,403,3.301,404,3.301]],["title/injectables/UsersService.html",[69,1.291,76,1.161]],["body/injectables/UsersService.html",[12,0.041,18,0.426,19,0.371,20,0.371,23,0.597,24,0.764,28,0.426,29,0.095,30,0.026,31,0.026,38,0.614,39,1.633,44,1.528,46,1.821,47,1.322,48,0.962,49,1.322,51,1.633,54,2.436,58,1.298,60,2.103,66,1.642,69,1.886,70,1.642,72,2.357,73,3.076,74,2.634,76,1.839,82,1.707,83,3.553,85,2.192,86,1.877,90,1.642,184,1.298,206,2.304,207,2.304,273,3.043,323,3.553,405,2.192,406,3.747,407,3.076,408,3.747,409,3.747,410,3.747,411,3.747,412,4.692,413,3.747,414,2.67,415,2.67,416,2.67,417,3.747,418,2.67,419,2.67,420,2.67,421,2.67,422,2.67,423,2.67,424,2.67,425,2.67,426,2.67]],["title/coverage.html",[427,2.83]],["body/coverage.html",[6,1.346,12,0.04,20,0.429,29,0.184,30,0.028,31,0.028,32,2.035,33,1.9,35,2.536,48,0.793,52,1.211,54,1.346,69,2.035,71,2.536,76,1.211,97,1.682,99,2.911,100,2.911,104,1.9,120,1.9,201,1.501,202,2.872,203,2.872,205,1.682,236,1.501,242,1.501,246,2.536,247,1.9,248,2.536,251,2.536,255,1.9,256,2.536,263,2.172,290,1.501,313,2.536,321,1.9,322,2.536,359,4.744,405,2.536,407,2.536,427,2.172,428,2.536,429,3.089,430,3.089,431,3.089,432,4.141,433,2.536,434,4.67,435,4.141,436,3.089,437,4.141,438,3.089,439,3.089,440,3.089,441,3.089]],["title/dependencies.html",[3,1.551,442,2.039]],["body/dependencies.html",[3,1.705,12,0.041,24,1.119,29,0.171,30,0.033,31,0.033,104,2.406,174,1.901,175,2.13,178,2.13,234,2.406,235,2.406,368,3.212,443,3.912,444,3.912,445,5.224,446,3.912,447,3.912,448,3.912,449,3.912,450,3.912,451,3.912,452,3.912,453,3.912,454,3.912,455,3.912]],["title/miscellaneous/enumerations.html",[456,1.527,457,2.921]],["body/miscellaneous/enumerations.html",[12,0.04,30,0.032,31,0.032,38,0.856,52,1.833,127,3.839,134,3.839,151,3.839,199,4.064,456,2.292,457,3.06,458,4.677,459,4.677,460,4.677,461,4.677,462,4.677,463,4.677,464,4.677,465,4.677,466,4.677,467,4.677]],["title/miscellaneous/functions.html",[456,1.527,468,2.921]],["body/miscellaneous/functions.html",[6,2.412,12,0.036,30,0.036,31,0.036,38,1.029,433,3.676,456,2.754,468,3.676,469,4.478]],["title/index.html",[38,0.571,470,2.483,471,2.483]],["body/index.html",[12,0.038,17,2.264,19,0.283,30,0.021,31,0.021,113,2.538,184,0.99,197,1.432,390,1.672,427,1.432,428,2.525,472,2.037,473,2.037,474,3.705,475,3.075,476,2.037,477,2.037,478,2.037,479,2.037,480,3.075,481,3.705,482,2.037,483,2.037,484,2.037,485,4.128,486,2.037,487,4.98,488,2.037,489,4.837,490,2.037,491,2.037,492,2.037,493,3.075,494,2.037,495,3.075,496,2.037,497,3.705,498,2.037,499,3.075,500,2.037,501,2.037,502,2.037,503,2.037,504,2.037,505,4.128,506,4.98,507,4.659,508,3.075,509,2.037,510,2.037,511,2.037,512,2.037,513,2.037,514,4.659,515,3.075,516,4.128,517,2.037,518,3.075,519,2.037,520,2.037,521,3.075,522,4.659,523,4.128,524,2.037,525,3.075,526,2.037,527,2.037,528,2.037,529,2.037,530,4.128,531,2.037,532,2.037,533,2.037,534,2.037,535,3.075,536,2.037,537,2.037,538,2.037,539,2.037,540,2.037,541,3.075,542,2.037,543,2.037,544,2.037,545,3.075,546,2.037,547,2.037,548,3.389,549,3.075,550,2.037,551,2.037,552,2.037,553,2.037,554,2.037,555,2.037,556,2.037,557,2.037,558,3.075,559,2.037,560,2.037,561,2.037,562,2.037,563,3.705,564,2.037,565,2.037,566,2.037,567,2.037,568,2.037,569,3.075,570,2.037,571,2.037,572,2.037,573,2.037,574,2.037,575,3.075,576,2.037,577,2.037,578,2.037,579,3.075,580,3.075,581,2.037,582,2.037,583,2.037,584,2.037,585,2.037,586,2.037,587,2.037,588,2.037,589,2.037,590,2.037,591,2.037,592,1.672,593,2.037,594,2.037,595,2.037,596,2.037,597,2.037,598,2.037,599,1.672]],["title/modules.html",[2,1.754]],["body/modules.html",[1,2.58,2,1.829,11,2.039,12,0.034,13,2.285,14,1.829,30,0.034,31,0.034,548,4.584,600,5.584,601,5.584,602,5.584]],["title/overview.html",[603,3.304]],["body/overview.html",[0,1.127,1,3.443,2,1.391,3,1.391,4,1.738,5,1.738,6,1.391,7,1.738,8,1.738,9,2.62,10,2.62,11,2.627,12,0.039,13,3.003,14,2.403,15,2.304,16,1.738,17,1.551,30,0.029,31,0.029,34,1.391,54,2.403,62,2.62,63,2.62,64,2.62,70,1.963,76,2.161,98,1.551,236,1.551,290,2.307,308,2.62,310,2.62,319,2.62,399,2.62,400,2.62,401,2.62,603,2.62,604,3.192,605,4.231,606,3.192]],["title/properties.html",[101,1.729,442,2.039]],["body/properties.html",[12,0.04,30,0.035,31,0.035,101,2.143,184,2.143,592,3.62,599,3.62,607,4.41,608,4.41,609,4.41]],["title/routes.html",[610,3.304]],["body/routes.html",[12,0.036,30,0.036,31,0.036,610,3.814]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":608,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z'})@isoptional()@isiso8601",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":319,"title":{},"body":{"injectables/PostsService.html":{},"overview.html":{}}}],["1.1.23",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["2",{"_index":320,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":265,"title":{},"body":{"controllers/PostsController.html":{}}}],["2020",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["234",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["25",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":605,"title":{},"body":{"overview.html":{}}}],["4",{"_index":604,"title":{},"body":{"overview.html":{}}}],["4354",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["4354})@apiparam({name",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["5",{"_index":606,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9])(?=.*[!@#\\$%\\^&\\*])(?=.{8",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["additional",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduser",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduser(@headers",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduser(headers",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduserwithbody",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduserwithbody(newuser",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduserwithexpress",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduserwithexpress(@req",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduserwithexpress(req",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["allowing",{"_index":536,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":585,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["application",{"_index":507,"title":{},"body":{"index.html":{}}}],["applications",{"_index":480,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":37,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["authbody",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":33,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":592,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":54,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":525,"title":{},"body":{"index.html":{}}}],["backers",{"_index":586,"title":{},"body":{"index.html":{}}}],["based",{"_index":520,"title":{},"body":{"index.html":{}}}],["board",{"_index":578,"title":{},"body":{"index.html":{}}}],["body",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":602,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":600,"title":{},"body":{"modules.html":{}}}],["building",{"_index":475,"title":{},"body":{"index.html":{}}}],["buisned",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":551,"title":{},"body":{"index.html":{}}}],["character",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["characters",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":514,"title":{},"body":{"index.html":{}}}],["class",{"_index":29,"title":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":98,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":535,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":519,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":308,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":309,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":310,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":399,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":400,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":401,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":542,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(`hello",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["console.log(email",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["constructor(usersservice",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["contain",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":32,"title":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":34,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":557,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":427,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":267,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":258,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(newpost",{"_index":261,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":97,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createuserdto",{"_index":201,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["dashes",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["date",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":553,"title":{},"body":{"index.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["defaultvaluepipe",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(0",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":505,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":524,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":515,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":534,"title":{},"body":{"index.html":{}}}],["description",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":490,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":564,"title":{},"body":{"index.html":{}}}],["discord",{"_index":550,"title":{},"body":{"index.html":{}}}],["dive",{"_index":552,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":428,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["draft",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["e2e",{"_index":500,"title":{},"body":{"index.html":{}}}],["each",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":476,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":512,"title":{},"body":{"index.html":{}}}],["eight",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ensure",{"_index":510,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":568,"title":{},"body":{"index.html":{}}}],["enum",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":457,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":555,"title":{},"body":{"index.html":{}}}],["expess",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["export",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["false",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":528,"title":{},"body":{"index.html":{}}}],["featured",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":538,"title":{},"body":{"index.html":{}}}],["feturedimageurl",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["few",{"_index":530,"title":{},"body":{"index.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["firstname",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":537,"title":{},"body":{"index.html":{}}}],["follow",{"_index":572,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":318,"title":{},"body":{"injectables/PostsService.html":{}}}],["framework",{"_index":474,"title":{},"body":{"index.html":{}}}],["full",{"_index":567,"title":{},"body":{"index.html":{}}}],["function",{"_index":246,"title":{},"body":{"interfaces/ICreateUserDto.html":{},"coverage.html":{}}}],["functions",{"_index":468,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":533,"title":{},"body":{"index.html":{}}}],["get(':id/:optionalparam",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/:optionalparam?')@apioperation({summary",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":271,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('injectable",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["getingectableservice",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{}}}],["getpostsbyuserid",{"_index":259,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostsbyuserid(@param('userid",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbyuserid(userid",{"_index":270,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":470,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserswithparamsandquery",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserswithparamsandquery(limit",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":560,"title":{},"body":{"index.html":{}}}],["grow",{"_index":582,"title":{},"body":{"index.html":{}}}],["hands",{"_index":554,"title":{},"body":{"index.html":{}}}],["handy",{"_index":543,"title":{},"body":{"index.html":{}}}],["hascar",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["hascar'})@apiquery({name",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["header",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["help",{"_index":558,"title":{},"body":{"index.html":{}}}],["here",{"_index":590,"title":{},"body":{"index.html":{}}}],["https://example.com/image.jpg",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isoptional()@isurl",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":596,"title":{},"body":{"index.html":{}}}],["icreateuserdto",{"_index":205,"title":{"interfaces/ICreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["id",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id'})@apiresponse({status",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implements",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["import",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":38,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":517,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":540,"title":{},"body":{"index.html":{}}}],["inject",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":532,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":488,"title":{},"body":{"index.html":{}}}],["interact",{"_index":561,"title":{},"body":{"index.html":{}}}],["interface",{"_index":236,"title":{"interfaces/ICreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":245,"title":{},"body":{"interfaces/ICreateUserDto.html":{}}}],["ip",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdefined",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatusenum",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypeenum",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":252,"title":{},"body":{"classes/PostMetadataOptionDto.html":{}}}],["iso8601",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96)@type(undefined",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":575,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":577,"title":{},"body":{"index.html":{}}}],["john",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":588,"title":{},"body":{"index.html":{}}}],["json.stringify(body",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.stringify(headers",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.stringify(newpost",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["json.stringify(newuser",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.stringify(patchpostdto",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["json.stringify(restparams",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.stringify(updateuser",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.stringify(user",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":593,"title":{},"body":{"index.html":{}}}],["key",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"index.html":{}}}],["key1",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["lastname",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":546,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["letters",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":599,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":580,"title":{},"body":{"index.html":{}}}],["limit",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":574,"title":{},"body":{"index.html":{}}}],["logic",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authbody",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":518,"title":{},"body":{"index.html":{}}}],["loop",{"_index":570,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["makes",{"_index":526,"title":{},"body":{"index.html":{}}}],["managing",{"_index":539,"title":{},"body":{"index.html":{}}}],["matches",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(/^[a",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["mau",{"_index":522,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(96",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["message",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["metadata",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["methods",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(3",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(4",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":456,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":579,"title":{},"body":{"index.html":{}}}],["mode",{"_index":493,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":516,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":594,"title":{},"body":{"index.html":{}}}],["n",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["name",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":565,"title":{},"body":{"index.html":{}}}],["nest",{"_index":481,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":598,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":506,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":263,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newpost",{"_index":269,"title":{},"body":{"controllers/PostsController.html":{}}}],["newuser",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["newuser.sayhello",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["node.js",{"_index":473,"title":{},"body":{"index.html":{}}}],["npm",{"_index":487,"title":{},"body":{"index.html":{}}}],["number",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object\"}'})@isoptional()@isjson",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":576,"title":{},"body":{"index.html":{}}}],["official",{"_index":523,"title":{},"body":{"index.html":{}}}],["offset",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["one",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["open",{"_index":581,"title":{},"body":{"index.html":{}}}],["option.dto",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option.dto.ts",{"_index":251,"title":{},"body":{"classes/PostMetadataOptionDto.html":{},"coverage.html":{}}}],["option.dto.ts:6",{"_index":253,"title":{},"body":{"classes/PostMetadataOptionDto.html":{}}}],["option.dto.ts:9",{"_index":254,"title":{},"body":{"classes/PostMetadataOptionDto.html":{}}}],["optional",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionalparam",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":603,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":442,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('postid",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameter",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter'})@apiresponse({status",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":566,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":249,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["password",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["patch",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':postid",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch(':postid')@apioperation({summary",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":247,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(id",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["platform",{"_index":521,"title":{},"body":{"index.html":{}}}],["please",{"_index":549,"title":{},"body":{"index.html":{}}}],["possible",{"_index":513,"title":{},"body":{"index.html":{}}}],["post",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":264,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isdefined()@isnotempty()@isstring()@matches(/^[a",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isnotempty()@isstring()@minlength(4",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isoptional()@isstring()@minlength(3",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post(':id",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('express",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":262,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":250,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":100,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:101",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:112",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:41",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:51",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:83",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postid",{"_index":275,"title":{},"body":{"controllers/PostsController.html":{}}}],["postmetadataoptiondto",{"_index":120,"title":{"classes/PostMetadataOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"coverage.html":{}}}],["posts",{"_index":257,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":312,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":255,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":13,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":290,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatusenum",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatusenum.draft",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttypeenum",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttypeenum.post",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":36,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":495,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":472,"title":{},"body":{"index.html":{}}}],["project",{"_index":485,"title":{},"body":{"index.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"properties.html":{}}}],["provider",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedat",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('offset",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":547,"title":{},"body":{"index.html":{}}}],["read",{"_index":589,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":504,"title":{},"body":{"index.html":{}}}],["real",{"_index":562,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":484,"title":{},"body":{"index.html":{}}}],["req",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.body",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":529,"title":{},"body":{"index.html":{}}}],["res",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.sendstatus(201",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":541,"title":{},"body":{"index.html":{}}}],["restparams",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["results",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["routes",{"_index":610,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":489,"title":{},"body":{"index.html":{}}}],["runs",{"_index":511,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["sayhello",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["scalable",{"_index":477,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":478,"title":{},"body":{"index.html":{}}}],["servise",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":486,"title":{},"body":{"index.html":{}}}],["side",{"_index":479,"title":{},"body":{"index.html":{}}}],["simple",{"_index":531,"title":{},"body":{"index.html":{}}}],["slug",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sponsors",{"_index":584,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":35,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:9",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":404,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":99,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":248,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":256,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:22",{"_index":272,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":268,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":311,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":313,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":314,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":315,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/providers/users.service.ts",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:20",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:8",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":322,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:101",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:110",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:95",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":402,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":491,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":494,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":496,"title":{},"body":{"index.html":{}}}],["started",{"_index":471,"title":{"index.html":{}},"body":{}}],["starter",{"_index":483,"title":{},"body":{"index.html":{}}}],["statements",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status.enum.ts",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":569,"title":{},"body":{"index.html":{}}}],["steps",{"_index":508,"title":{},"body":{"index.html":{}}}],["story",{"_index":466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":527,"title":{},"body":{"index.html":{}}}],["string",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":266,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":548,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":601,"title":{},"body":{"modules.html":{}}}],["table",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":509,"title":{},"body":{"index.html":{}}}],["test",{"_index":499,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":502,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":501,"title":{},"body":{"index.html":{}}}],["tests",{"_index":497,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":583,"title":{},"body":{"index.html":{}}}],["this.authservice.isauthenticated",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login(authbody",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.firstname",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["this.postsservice.getpostsbyuserid(userid",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.gethello",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":317,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":563,"title":{},"body":{"index.html":{}}}],["title",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":591,"title":{},"body":{"index.html":{}}}],["transform",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["transformer",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["true",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["true})@minlength(3",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":597,"title":{},"body":{"index.html":{}}}],["type",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type.enum.ts",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":482,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@validatenested({each",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isdefined()@isnotempty()@isenum(poststatusenum",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isdefined()@isnotempty()@isenum(posttypeenum",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":498,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":609,"title":{},"body":{"properties.html":{}}}],["update",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated.'})@apiparam({name",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":260,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":274,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":571,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":242,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["uppercase",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["use",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["user",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["user'})@apiparam({name",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:27",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":273,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":323,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":403,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/providers/users.service",{"_index":316,"title":{},"body":{"injectables/PostsService.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":321,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":14,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":76,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["validatenested",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/PostMetadataOptionDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostMetadataOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["value1",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":607,"title":{},"body":{"properties.html":{}}}],["video",{"_index":556,"title":{},"body":{"index.html":{}}}],["visit",{"_index":545,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":559,"title":{},"body":{"index.html":{}}}],["void",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["watch",{"_index":492,"title":{},"body":{"index.html":{}}}],["website",{"_index":595,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":544,"title":{},"body":{"index.html":{}}}],["x",{"_index":573,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":587,"title":{},"body":{"index.html":{}}}],["you're",{"_index":503,"title":{},"body":{"index.html":{}}}],["z0",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[0",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["z])(?=.*[a",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ICreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authBody: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authBody\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() authBody: any) {\n    return this.authService.login(authBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login({ email, password, id }) {\n    const user = this.usersService.getUserById(id);\n\n    console.log(email, password, id);\n    return `User: \\n ${JSON.stringify(user)}`;\n  }\n\n  public isAuthenticated() {\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                feturedImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaData\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', type: String, example: 'This is the content of the post'})@IsOptional()@IsString()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        feturedImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The featured image of the post', type: String, example: 'https://example.com/image.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostMetadataOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The metadata of the post', type: 'array', required: false, items: undefined})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the post', enum: PostTypeEnum, default: undefined})@IsDefined()@IsNotEmpty()@IsEnum(PostTypeEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The published ISO8601 date of the post', type: Date, example: '2020-01-01T00:00:00.000Z'})@IsOptional()@IsISO8601()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The schema of the post', type: String, example: '{\"type\": \"object\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', type: String, example: 'my-post'})@IsDefined()@IsNotEmpty()@IsString()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should only contain lowercase letters and dashes'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The status of the post', enum: PostStatusEnum, default: undefined})@IsDefined()@IsNotEmpty()@IsEnum(PostStatusEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The tags of the post', type: undefined, example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', type: String, example: 'My Post'})@IsNotEmpty()@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsOptional,\n  IsJSON,\n  IsArray,\n  Matches,\n  IsUrl,\n  IsISO8601,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { PostMetadataOptionDto } from './create-post-metadata-option.dto';\nimport { PostTypeEnum } from '../enums/post-type.enum';\nimport { PostStatusEnum } from '../enums/post-status.enum';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    type: String,\n    example: 'My Post',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    description: 'The type of the post',\n    enum: PostTypeEnum,\n    default: PostTypeEnum.Post,\n  })\n  @IsDefined()\n  @IsNotEmpty()\n  @IsEnum(PostTypeEnum)\n  postType: PostTypeEnum;\n\n  @ApiProperty({\n    description: 'The status of the post',\n    enum: PostStatusEnum,\n    default: PostStatusEnum.Draft,\n  })\n  @IsDefined()\n  @IsNotEmpty()\n  @IsEnum(PostStatusEnum)\n  status: PostStatusEnum;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    type: String,\n    example: 'my-post',\n  })\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: 'slug should only contain lowercase letters and dashes',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    type: String,\n    example: 'This is the content of the post',\n  })\n  @IsOptional()\n  @IsString()\n  @MinLength(3)\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'The schema of the post',\n    type: String,\n    example: '{\"type\": \"object\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'The featured image of the post',\n    type: String,\n    example: 'https://example.com/image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  feturedImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The published ISO8601 date of the post',\n    type: Date,\n    example: '2020-01-01T00:00:00.000Z',\n  })\n  @IsOptional()\n  @IsISO8601()\n  publishedAt?: Date;\n\n  @ApiPropertyOptional({\n    description: 'The tags of the post',\n    type: [String],\n    example: ['tag1', 'tag2'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'The metadata of the post',\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          example: 'key1',\n        },\n        value: {\n          type: 'string',\n          example: 'value1',\n        },\n      },\n    },\n  })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => PostMetadataOptionDto)\n  metaData?: PostMetadataOptionDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ICreateUserDto\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sayHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, {message: 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sayHello\n                        \n                    \n                \n            \n            \n                \nsayHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/dtos/create-user.dto.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PartialType } from '@nestjs/mapped-types';\n\ninterface ICreateUserDto {\n  firstName: string;\n  lastName?: string;\n  email: string;\n  password: string;\n  sayHello: () => void;\n}\n\nexport class CreateUserDto implements ICreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Type(() => String)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, {\n    message:\n      'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n  password: string;\n\n  sayHello() {\n    console.log(`hello my name is ${this.firstName}`);\n  }\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateUserDto.html":{"url":"interfaces/ICreateUserDto.html","title":"interface - ICreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            sayHello\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sayHello\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sayHello:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PartialType } from '@nestjs/mapped-types';\n\ninterface ICreateUserDto {\n  firstName: string;\n  lastName?: string;\n  email: string;\n  password: string;\n  sayHello: () => void;\n}\n\nexport class CreateUserDto implements ICreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Type(() => String)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, {\n    message:\n      'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n  password: string;\n\n  sayHello() {\n    console.log(`hello my name is ${this.firstName}`);\n  }\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostMetadataOptionDto.html":{"url":"classes/PostMetadataOptionDto.html","title":"class - PostMetadataOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostMetadataOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metadata-option.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metadata-option.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metadata-option.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class PostMetadataOptionDto {\n  @IsNotEmpty()\n  @IsString()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                getPostsByUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(newPost: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPost\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getPostsByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByUserId(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':postId')@ApiOperation({summary: 'Update a post by id'})@ApiResponse({status: 200, description: 'The post has been successfully updated.'})@ApiParam({name: 'postId', type: String, required: true, example: '234', description: 'The id of the post'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiOperation, ApiParam } from '@nestjs/swagger';\n\nimport { PostsService } from './providers/posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get(':userId')\n  getPostsByUserId(@Param('userId') userId: string) {\n    return this.postsService.getPostsByUserId(userId);\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new post' })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n  })\n  public createPost(\n    @Body(new ValidationPipe({ whitelist: false, transform: true }))\n    newPost: CreatePostDto,\n  ) {\n    return `Post Request for posts with body: \\n ${JSON.stringify(newPost)}`;\n  }\n\n  @Patch(':postId')\n  @ApiOperation({ summary: 'Update a post by id' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated.',\n  })\n  @ApiParam({\n    name: 'postId',\n    type: String,\n    required: true,\n    example: '234',\n    description: 'The id of the post',\n  })\n  public updatePost(\n    @Body(new ValidationPipe({ whitelist: false, transform: true }))\n    patchPostDto: PatchPostDto,\n    @Param('postId')\n    postId: string,\n  ) {\n    return `Patch Request for posts with id: \\n ${postId} \\n and body: \\n ${JSON.stringify(patchPostDto)}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getPostsByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPostsByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostsByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../../users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public getPostsByUserId(userId: string) {\n    const user = this.usersService.getUserById(userId);\n    if (!user) return 'User not found';\n    return [\n      {\n        userId,\n        user,\n        title: 'Post 1',\n        body: 'Post 1 body',\n      },\n      {\n        userId,\n        user,\n        title: 'Post 2',\n        body: 'Post 2 body',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PartialType } from '@nestjs/mapped-types';\n\ninterface ICreateUserDto {\n  firstName: string;\n  lastName?: string;\n  email: string;\n  password: string;\n  sayHello: () => void;\n}\n\nexport class CreateUserDto implements ICreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  @Type(() => String)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, {\n    message:\n      'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n  password: string;\n\n  sayHello() {\n    console.log(`hello my name is ${this.firstName}`);\n  }\n}\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                addUser\n                            \n                            \n                                    \n                                    Public\n                                addUserWithBody\n                            \n                            \n                                    \n                                    Public\n                                addUserWithExpress\n                            \n                            \n                                    \n                                getIngectableService\n                            \n                            \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsersWithParamsAndQuery\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(headers: any, ip: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        addUserWithBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserWithBody(newUser: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        addUserWithExpress\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserWithExpress(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('express')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIngectableService\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIngectableService()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('injectable')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsersWithParamsAndQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersWithParamsAndQuery(limit: number, offset: number, id: number, restParams: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/:optionalParam?')@ApiOperation({summary: 'Get user by id with optional parameter'})@ApiResponse({status: 200, description: 'returns a user'})@ApiParam({name: 'id', type: Number, required: true, description: 'User ID', example: 4354})@ApiParam({name: 'optionalParam', type: String, required: false, description: 'Optional Additional parameter', example: 'hasCar'})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit', example: 10})@ApiQuery({name: 'offset', type: Number, required: false, description: 'Offset', example: 0})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                restParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(id: number, updateUser: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUser\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  Req,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport {\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n  ApiOperation,\n  ApiResponse,\n} from '@nestjs/swagger';\n\nimport { UsersService } from './providers/users.service';\nimport { CreateUserDto, UpdateUserDto } from './dtos/create-user.dto';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  private readonly UsersService: UsersService;\n\n  constructor(usersService: UsersService) {\n    this.UsersService = usersService;\n  }\n\n  @Get('injectable')\n  getIngectableService() {\n    return this.UsersService.getHello();\n  }\n\n  @Get()\n  public getUsers() {\n    return 'Get Request for users';\n  }\n\n  @Get(':id/:optionalParam?')\n  @ApiOperation({ summary: 'Get user by id with optional parameter' })\n  @ApiResponse({ status: 200, description: 'returns a user' })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    required: true,\n    description: 'User ID',\n    example: 4354,\n  })\n  @ApiParam({\n    name: 'optionalParam',\n    type: String,\n    required: false,\n    description: 'Optional Additional parameter',\n    example: 'hasCar',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'offset',\n    type: Number,\n    required: false,\n    description: 'Offset',\n    example: 0,\n  })\n  public getUsersWithParamsAndQuery(\n    @Query('limit', new DefaultValuePipe(0), ParseIntPipe) limit: number,\n    @Query('offset', new DefaultValuePipe(0), ParseIntPipe) offset: number,\n    @Param('id', ParseIntPipe) id: number,\n    @Param() restParams: any,\n  ) {\n    return `Get Request for users with params: \\n id: ${id} \\n ${JSON.stringify(restParams)} \\n and query: \\n limit: ${limit} \\n offset: ${offset}`;\n  }\n\n  @Post()\n  public addUser(@Headers() headers: any, @Ip() ip: any) {\n    // res.sendStatus(201);\n    return `Post Request for users with header: \\n ${JSON.stringify(headers)} \\n and ip: ${ip}`;\n  }\n\n  // post with using expess req res\n  @Post('express')\n  public addUserWithExpress(@Req() req: Request) {\n    const body = req.body;\n    return `Post Request for users Express: \\n ${JSON.stringify(body)}`;\n  }\n\n  @Post(':id')\n  public addUserWithBody(\n    @Body(new ValidationPipe({ whitelist: true, transform: true }))\n    newUser: CreateUserDto,\n  ) {\n    newUser.sayHello();\n    return `Post Request for users with body: \\n ${JSON.stringify(newUser)}`;\n  }\n\n  @Patch(':id')\n  public patchUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Body(new ValidationPipe({ whitelist: true, transform: true }))\n    updateUser: UpdateUserDto,\n  ) {\n    return `Patch Request for users with id: \\n ${id} \\n and body: \\n ${JSON.stringify(updateUser)}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UsersService to connect to Users table and perform buisned logic\nInject AuthService to be able to use Authservice\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                    Public\n                                getUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { userId: string; firstName: string; lastName: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { AuthService } from 'src/auth/providers/auth.service';\n/**\n * UsersService to connect to Users table and perform buisned logic\n * Inject AuthService to be able to use Authservice\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  getHello(): string {\n    const isAuthenticated = this.authService.isAuthenticated();\n    if (!isAuthenticated) return 'Not authenticated';\n    return 'Hello from users Injectable servise provider!';\n  }\n\n  public getUserById(userId: string) {\n    return {\n      userId,\n      firstName: 'John',\n      lastName: 'Doe',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metadata-option.dto.ts\n            \n            class\n            PostMetadataOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            interface\n            ICreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatusEnum   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostTypeEnum   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatusEnum\n                    \n                \n                        \n                            \n                                 Draft\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 Scheduled\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 Review\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 Published\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostTypeEnum\n                    \n                \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 Page\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 Story\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 Series\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
